untyped
global function ClDroppedWeaponFlyout_Init

global function ClientCodeCallback_BodyGroupChanged

global function ClientCodeCallback_UseEntGainedFocus
global function ClientCodeCallback_UseEntLostFocus

global function AddCallback_OnPetTitanChanged
global function ClientCodeCallback_OnPetTitanModeChanged
global function AddCallback_OnPetTitanModeChanged
global function ClientCodeCallback_OnPetTitanChanged

global function DestroyPickupFlyout
global function HidePickupFlyout
global function ShowPickupFlyout
global function IsCurrentlyFocusedWeapon
global function IsPickupFlyoutValid
global function StopPickupPrompt
global function ResumePickupPrompt

#if HAS_WEAPON_PICKUP_HIGHLIGHT
global function ServerCallback_RefreshWeaponHighlights
#endif

const RUI_TEXT_LEFT = $"ui/cockpit_console_text_top_left.rpak"
const RUI_TEXT_RIGHT = $"ui/cockpit_console_text_top_right.rpak"

enum eFlyoutType
{
	STANDARD_WEAPON
	BT_LOADOUT_PICKUP
}

struct
{
	var flyoutRUI
	var lastWeaponRuiSet
	int flyoutType
	entity focusedEnt
	table<string, asset> modImages

	// PICKUP RUI
	var bgRui
	var weaponNameRui
	var weaponLevelRui
	var weaponLevelLabelRui
	var weaponFireRateRui
	var weaponFireRateLabelRui
	var weaponModTopo
	int modCount
	bool shouldShowFlyout = true
	array<var> modNameRuis
	array<var> modDescRuis
	array<string> unregisteredMods
} file

void function ClDroppedWeaponFlyout_Init()
{
	RegisterSignal( "PetTitanChanged" )
	RegisterSignal( "PetTitanModeChanged" )

	var dataTable = GetDataTable( $"datatable/pilot_weapon_mods_common.rpak" )
	int numRows = GetDatatableRowCount( dataTable )

	for ( int i = 0; i < numRows; i++ )
	{
		string modRef = GetDataTableString( dataTable, i, PILOT_WEAPON_MOD_COMMON_COLUMN )
		asset modImage = GetDataTableAsset( dataTable, i, PILOT_WEAPON_MOD_COMMON_IMAGE_COLUMN )
		file.modImages[ modRef ] <- modImage
	}

	AddCinematicEventFlagChangedCallback( CE_FLAG_HIDE_MAIN_HUD, WeaponPickupFlyout_UpdateVisibility )
	AddCallback_OnSelectedWeaponChanged( OnSelectedWeaponChanged )

	var topo = RuiTopology_CreatePlane( <GetScreenSize()[0] * 0.07, GetScreenSize()[1] - GetScreenSize()[1] * 0.25, 0>, <GetScreenSize()[0] * 0.3, 0, 0>, <0, GetScreenSize()[0] * 0.3 / 16.0 * 9.0, 0>, false )
	var bgTopo = RuiTopology_CreatePlane( <GetScreenSize()[0] * 0.07, GetScreenSize()[1] - GetScreenSize()[1] * 0.25, 0>, <GetScreenSize()[0] * 0.3, 0, 0>, <0, GetScreenSize()[0] * 0.3 / 16.0 * 9.0, 0>, false )

	float horzMultiplier = 9.0 / 16.0
    var rui = RuiCreate( $"ui/basic_image.rpak", bgTopo, RUI_DRAW_HUD, -5)

    RuiSetFloat3( rui, "basicImageColor", <0.0, 0.0, 0.0>   )
	RuiSetFloat( rui, "basicImageAlpha", 0.9)

	{
	
		rui = RuiCreate( RUI_TEXT_LEFT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <0.02 * horzMultiplier, -0.2, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "R-97" )
		RuiSetFloat( rui, "msgFontSize", 150.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.5 )
		file.weaponNameRui = rui

		rui = RuiCreate( RUI_TEXT_RIGHT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <1.0 - 0.02 * horzMultiplier, -0.15, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "15" )
		RuiSetFloat( rui, "msgFontSize", 150.0 )
		RuiSetFloat( rui, "msgAlpha", 1.0 )
		RuiSetFloat( rui, "thicken", 0 )
		file.weaponLevelRui = rui
	
		rui = RuiCreate( RUI_TEXT_RIGHT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <1.0 - 0.02 * horzMultiplier, -0.2, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "DAMAGE" )
		RuiSetFloat( rui, "msgFontSize", 90.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.0 )
		file.weaponLevelLabelRui = rui

		rui = RuiCreate( RUI_TEXT_RIGHT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <1.0 - 0.45 * horzMultiplier, -0.15, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "4.0" )
		RuiSetFloat( rui, "msgFontSize", 150.0 )
		RuiSetFloat( rui, "msgAlpha", 1.0 )
		RuiSetFloat( rui, "thicken", 0 )
		file.weaponFireRateRui = rui
	
		rui = RuiCreate( RUI_TEXT_RIGHT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <1.0 - 0.45 * horzMultiplier, -0.2, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "FIRE RATE" )
		RuiSetFloat( rui, "msgFontSize", 90.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.0 )
		file.weaponFireRateLabelRui = rui
	}

	file.weaponModTopo = topo
	thread TrackWeaponPos( topo, bgTopo )

	#if HAS_WEAPON_PICKUP_HIGHLIGHT
	AddCreateCallback( "weaponx", ClWeaponCreationCallback )
	#endif
}

void function OnSelectedWeaponChanged( entity weapon )
{
	if (!IsValid(file.focusedEnt))
		return
	if (file.focusedEnt.GetClassName() != "weaponx")
		return
	if (!weapon.IsWeaponOffhand() && !file.focusedEnt.IsWeaponOffhand())
		DisplayWeapon(weapon)
}

void function ClientCodeCallback_BodyGroupChanged( entity ent, int bodyGroupIndex, int oldState, int newState )
{
//	PrintFunc( "entity " + ent + " index " + bodyGroupIndex + "newstate " + newState )

	if ( IsSpectre( ent ) || IsStalker( ent ) )
	{
		if ( bodyGroupIndex == ent.FindBodyGroup( "removableHead" ) )
		{
			ModelFX_DisableGroup( ent, "foe_lights" )
			ModelFX_DisableGroup( ent, "friend_lights" )
		}
	}
}

void function ClientCodeCallback_UseEntGainedFocus( entity ent )
{
	foreach ( callbackFunc in clGlobal.onUseEntGainFocusCallbacks )
	{
		callbackFunc( ent )
	}

	DestroyPickupFlyout()

	int neededType = eFlyoutType.STANDARD_WEAPON

	if ( ent.GetClassName() == "weaponx" )
	{
		#if SP
		int loadoutIndex = GetSPTitanLoadoutIndexForWeapon( ent.GetWeaponClassName() )
		neededType = (loadoutIndex >= 0) ? eFlyoutType.BT_LOADOUT_PICKUP : eFlyoutType.STANDARD_WEAPON
		#endif

		if ( neededType == eFlyoutType.STANDARD_WEAPON )
		{
			/*if ( (file.flyoutRUI == null) || file.flyoutType != neededType )
			{
				DestroyPickupFlyout()
				file.flyoutRUI = RuiCreate( $"ui/dropped_weapon_flyout.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 0 )
				file.flyoutType = neededType
			}

			int modNum = 1
			array<string> weaponMods = ent.GetMods()
			foreach ( mod in weaponMods )
			{
				if ( modNum >= 5 ) // setting mod5 in the rui crashes client
					break
					
				if ( mod in file.modImages )
					RuiSetImage( file.flyoutRUI, "mod" + modNum++, file.modImages[ mod ] )
			}

			RuiSetGameTime( file.flyoutRUI, "startTime", Time() )
			RuiTrackFloat3( file.flyoutRUI, "pos", ent, RUI_TRACK_ABSORIGIN_FOLLOW )
			RuiSetString( file.flyoutRUI, "titleText", expect string( ent.GetWeaponInfoFileKeyField( "shortprintname" ) ) )
			RuiSetString( file.flyoutRUI, "descriptionText", expect string( ent.GetWeaponInfoFileKeyField( "description" ) ) )

			RuiSetBool( file.flyoutRUI, "isOffhandWeapon", ent.IsWeaponOffhand() )
			RuiSetImage( file.flyoutRUI, "icon", ent.GetWeaponInfoFileKeyFieldAsset( "hud_icon" ) )
			RuiSetFloat( file.flyoutRUI, "worldOffsetY", GetLocalViewPlayer().IsTitan() ? 98.0 : 32.0 )
			RuiSetResolutionToScreenSize( file.flyoutRUI )

			if ( ent.GetWeaponSettingBool( eWeaponVar.is_burn_mod ) )
				RuiSetFloat3( file.flyoutRUI, "color", BURN_CARD_WEAPON_HUD_COLOR_VECTOR )

			var rui = ClWeaponStatus_GetWeaponHudRui( GetLocalViewPlayer(), ent )
			if ( rui != null )
			{
				RuiSetBool( rui, "isHighlighted", true )
				file.lastWeaponRuiSet = rui
			}*/
			//file.shouldShowFlyout = true
			file.focusedEnt = ent
			WeaponPickupFlyout_UpdateInfo( ent, ent.GetWeaponClassName(), ent.GetMods() )

			entity weapon = ent
			if (weapon.IsWeaponOffhand())
			{
				DisplayWeapon(GetLocalViewPlayer().GetOffhandWeapon(GetWeaponInfoFileKeyField_GlobalInt( weapon.GetWeaponClassName(), "offhand_default_inventory_slot" )))
				
			}
			else if (!GetLocalViewPlayer().GetActiveWeapon().IsWeaponOffhand())
				DisplayWeapon(GetLocalViewPlayer().GetActiveWeapon())
		}
		// #if SP
		// else if ( neededType == eFlyoutType.BT_LOADOUT_PICKUP )
		// {
		// 	// The first one is picked up automatically an dhandled by a different custom system.
		// 	if ( ent.GetWeaponClassName() == SP_FIRST_TITAN_LOADOUT_KIT )
		// 		return

		// 	if ( (file.flyoutRUI == null) || file.flyoutType != neededType )
		// 	{
		// 		DestroyPickupFlyout()
		// 		file.flyoutRUI = CreateCockpitRui( $"ui/dropped_weapon_bt_loadout_flyout.rpak", 0 )
		// 		file.flyoutType = neededType
		// 	}

		// 	RuiSetGameTime( file.flyoutRUI, "startTime", Time() )
		// 	RuiSetString( file.flyoutRUI, "titleText", GetSPTitanLoadoutForIndex_MenuItem( loadoutIndex ) )
		// 	RuiSetImage( file.flyoutRUI, "icon", ent.GetWeaponInfoFileKeyFieldAsset( "hud_icon" ) )
		// }
		// #endif
	}

	if ( GetWeaponFlyoutAliveTime() < 0.5 && IsWeaponFlyoutVisible() )
	{
		HidePickupFlyout( 2.0 )
		SetWeaponFlyoutRemainingTime( 2.0 )
	}
	else
	{
		DestroyWeaponFlyout()
	}

#if HAS_AMMO_FULL_FLYOUT
	if ( IsAmmoFullWeapon( ent ) )
		HideAmmoFullFlyout()
#endif

#if HAS_WEAPON_PICKUP_HIGHLIGHT
	ManageHighlightEntity( ent )
#endif

	#if SP
	ScriptCallback_UpdateOnscreenHint()
	#endif
}

void function StopPickupPrompt()
{
	file.shouldShowFlyout = false
}

void function ResumePickupPrompt()
{
	file.shouldShowFlyout = true
}

vector function WorldToScreenPos( vector position )
{
    array pos = expect array( Hud.ToScreenSpace( position ) )

    vector result = <float( pos[0] ), float( pos[1] ), 0 >
    //print(result)
    return result
}

void function TrackWeaponPos( var topo, var bgTopo )
{
	while (true)
	{
		WaitFrame()
		if (!IsValid(file.focusedEnt) || !file.shouldShowFlyout)
		{
			RuiTopology_UpdatePos( topo, <GetScreenSize()[0], GetScreenSize()[1], 0>, 
            	<GetScreenSize()[0] * 0.2, 0, 0>, <0, GetScreenSize()[0] * 0.2 / 16.0 * 9.0, 0>)
			RuiTopology_UpdatePos( bgTopo, <GetScreenSize()[0], GetScreenSize()[1], 0>, 
           		<GetScreenSize()[0] * 0.2, 0, 0>, <0, GetScreenSize()[0] * 0.2 / 16.0 * 9.0, 0>)
	
			continue
		}

		float bgTopoSize = float(file.modCount) / 5.0
		float vertOffset = GetScreenSize()[0] * 0.2 / 16.0 * 9.0

		vector pos = file.focusedEnt.GetOrigin()
		pos = WorldToScreenPos( pos )
		//print(pos)
		pos = ClipScreenPositionToBox( pos, 50, GetScreenSize()[0] * 0.8 - 50, vertOffset * 0.5 * bgTopoSize + vertOffset * 0.2 + 50, GetScreenSize()[1] - (vertOffset * 0.5 * bgTopoSize) - 50 )
		
		
		float scale = 1.2
		RuiTopology_UpdatePos( topo, pos - <0, vertOffset * 0.5, 0> * bgTopoSize, 
            <GetScreenSize()[0] * 0.2, 0, 0>, <0, vertOffset, 0>)
		RuiTopology_UpdatePos( bgTopo, pos - <0, vertOffset * 0.5 * bgTopoSize + vertOffset * 0.2, 0>, 
            <GetScreenSize()[0] * 0.2, 0, 0>, <0, vertOffset * bgTopoSize + vertOffset * 0.2, 0> )
	}
}

vector function ClipScreenPositionToBox( vector pos, float xMin, float xMax, float yMin, float yMax )
{
	vector result = pos

	result.x = clamp( result.x, xMin, xMax )
	result.y = clamp( result.y, yMin, yMax )

	return result
}

void function ClientCodeCallback_UseEntLostFocus( entity ent )
{
	foreach ( callbackFunc in clGlobal.onUseEntLoseFocusCallbacks )
	{
		callbackFunc( ent )
	}

	DestroyPickupFlyout()

	if ( file.lastWeaponRuiSet != null )
	{
		RuiSetBool( file.lastWeaponRuiSet, "isHighlighted", false )
		file.lastWeaponRuiSet = null
	}

	if ( file.focusedEnt == ent )
	{
		StopDisplay()
		file.focusedEnt = null
	}

#if HAS_WEAPON_PICKUP_HIGHLIGHT
	if ( IsValid( ent ) )
		ManageHighlightEntity( ent )
#endif
}

bool function IsPickupFlyoutValid()
{
	return ( file.flyoutRUI != null )
}

bool function IsCurrentlyFocusedWeapon( entity ent )
{
	return file.focusedEnt == ent
}

void function DestroyPickupFlyout()
{
	//file.shouldShowFlyout = false
	if ( file.flyoutRUI == null )
		return

	RuiDestroy( file.flyoutRUI )
	file.flyoutRUI = null

	#if SP
	ScriptCallback_UpdateOnscreenHint()
	#endif
}

void function HidePickupFlyout( float hideDuration )
{
	if ( file.flyoutRUI == null )
		return

	RuiSetFloat( file.flyoutRUI, "hideDuration", hideDuration )
	RuiSetGameTime( file.flyoutRUI, "hideStartTime", Time() )
}

void function ShowPickupFlyout()
{
	if ( file.flyoutRUI == null )
		return

	RuiSetFloat( file.flyoutRUI, "hideDuration", 0.0 )

	#if SP
	ScriptCallback_UpdateOnscreenHint()
	#endif
}

void function WeaponPickupFlyout_UpdateVisibility( entity player )
{
	if ( file.flyoutRUI == null )
		return

	int ceFlags = player.GetCinematicEventFlags()
	bool hideHud = ( ceFlags & CE_FLAG_HIDE_MAIN_HUD ) > 0
	RuiSetBool( file.flyoutRUI, "inCinematic", hideHud )
}

array<vector> colors = [
	<0.3, 0.3, 0.3>,
	<0.15, 0.75, 0.15>,
	<0.15, 0.35, 0.75>,
	<0.55, 0.15, 0.75>,
	<0.55, 0.35, 0.05>,
	<0.75, 0.1, 0.1>
]

string function GetArrayString( array<string> mods )
{
	string s = ""
	for (int i = 0; i < mods.len(); i++) {
		s += mods[i]
		if (i < mods.len() - 1) s += ", "
	}
	return s
}

float function ScaleDamageWithWeaponLevel( entity ent )
{
    float damageScale = 1 + 0.2 * max(-4, roguelikeLevel)

	return damageScale * ent.GetWeaponSettingInt( eWeaponVar.damage_near_value )
}

void function WeaponPickupFlyout_UpdateInfo( entity weaponEnt, string weapon, array<string> initMods )
{
	array<string> mods
	foreach (string m in initMods)
	{
		if (ShopPrices_IsModRegistered(m))
		{
			mods.append(m)
			if (ShopData_GetModValue(m) == MODVALUE_PRESET)
			{
				mods = [ m ]
				break
			}
		}
		else 
		{
			if (!file.unregisteredMods.contains(m))
				file.unregisteredMods.append(m)
		}
	}
	file.modCount = mods.len()
	
	while (mods.len() > file.modNameRuis.len())
	{
		float horzMultiplier = 09.0 / 16.0
		var topo = file.weaponModTopo
		float offset = 0.2 * file.modNameRuis.len()
		var rui = RuiCreate( RUI_TEXT_LEFT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <0.02 * horzMultiplier, offset + 0.015, 0> )
		RuiSetFloat3( rui, "msgColor", <0.3, 0.3, 0.3> )
		RuiSetString( rui, "msgText", "Light Mag" )
		RuiSetFloat( rui, "msgFontSize", 90.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 2 )
		file.modNameRuis.append(rui)
	
		/*rui = RuiCreate( RUI_TEXT_LEFT, topo, RUI_DRAW_HUD, -4 )
		RuiSetInt( rui, "maxLines", 1 )
		RuiSetInt( rui, "lineNum", 0 )
		RuiSetFloat2( rui, "msgPos", <0.02 * horzMultiplier, offset + 0.115, 0> )
		RuiSetFloat3( rui, "msgColor", <0.5, 0.5, 0.5> )
		RuiSetString( rui, "msgText", "+5%% movement speed, -20%% mag size" )
		RuiSetFloat( rui, "msgFontSize", 80.0 )
		RuiSetFloat( rui, "msgAlpha", 0.9 )
		RuiSetFloat( rui, "thicken", 0.5 )
		file.modDescRuis.append(rui)*/
	}


	if (!weaponEnt.IsWeaponOffhand())
	{
		RuiSetString( file.weaponLevelRui, "msgText", AbbreviateNumber(ScaleDamageWithWeaponLevel(weaponEnt)) )
		RuiSetString( file.weaponLevelLabelRui, "msgText", "DAMAGE" )
		RuiSetString( file.weaponFireRateLabelRui, "msgText", "FIRE RATE" )
		RuiSetString( file.weaponFireRateRui, "msgText", format("%.1f", weaponEnt.GetWeaponSettingFloat(eWeaponVar.fire_rate)) )
	}
	else
	{
		RuiSetString( file.weaponFireRateLabelRui, "msgText", "" )
		RuiSetString( file.weaponFireRateRui, "msgText", "" )
		if (weapon != "mp_ability_grapple")
		{
			try
			{
				RuiSetString( file.weaponLevelRui, "msgText", string(weaponEnt.GetWeaponSettingInt( eWeaponVar.ammo_clip_size ) / weaponEnt.GetWeaponSettingInt( eWeaponVar.ammo_min_to_fire ))   )
			}
			catch (ex)
			{
				RuiSetString( file.weaponLevelRui, "msgText", "--" )
			}
			RuiSetString( file.weaponLevelLabelRui, "msgText", "CHARGES" )
		}
		else
		{
			try
			{
				RuiSetString( file.weaponLevelRui, "msgText", string(100 / int(weaponEnt.GetWeaponSettingFloat(eWeaponVar.grapple_power_required))))
			}
			catch (ex)
			{
				RuiSetString( file.weaponLevelRui, "msgText", "--" )
			}
			RuiSetString( file.weaponLevelLabelRui, "msgText", "CHARGES" )
		}
	}
	RuiSetString( file.weaponNameRui, "msgText", GetWeaponInfoFileKeyField_GlobalString(weapon, "shortprintname") )

	for (int i = 0; i < file.modNameRuis.len(); i++)
	{
		var nameRui = file.modNameRuis[i]
		//var descRui = file.modDescRuis[i]

		if (i >= mods.len())
		{
			RuiSetString( nameRui, "msgText", "" )
			//RuiSetString( descRui, "msgText", "" )
		}
		else
		{
			string m = mods[i]
			string desc = ShopData_GetModDesc(m)
			if (desc.find("\n") == null)
				desc = "\n" + desc
			RuiSetString( nameRui, "msgText", ShopData_GetModName(m) + ": `1" + desc )
			//RuiSetString( descRui, "msgText", ShopData_GetModDesc(m) )
			RuiSetFloat3( nameRui, "msgColor", colors[ShopData_GetModValue(m)] )
		}
	}
	if (file.unregisteredMods.len() > 0)
		printt("UNREGISTERED MODS:\n", GetArrayString(file.unregisteredMods))
}

string function AbbreviateNumber( float num )
{
	float abs = fabs(num)
	if (abs < 1000)
		return format( "%.1f", num ) // 999.9
	else if (abs < 100000)
		return format( "%.1fK", num / 1000.0 ) // 99.9K
	else if (abs < 1000000)
		return format( "%.0fK", num / 1000.0 ) // 999K
	else if (abs < 100000000)
		return format( "%.1fM", num / 1000000.0 ) // 99.9M
	else if (abs < 1000000000)
		return format( "%.0fM", num / 1000000.0 ) // 999M
	else if (abs < 100000000000)
		return format( "%.1fB", num / 1000000000.0 ) // 99.9B
	
	return format( "%.1fB", num / 1000000.0 ) // 999B
}

#if HAS_WEAPON_PICKUP_HIGHLIGHT
void function ServerCallback_RefreshWeaponHighlights( int eHandle )
{
	entity weapon = GetEntityFromEncodedEHandle( eHandle )
	if ( weapon != null )
		ManageHighlightEntity( weapon )
}

void function ClWeaponCreationCallback( entity weapon )
{

}
#endif


void function AddCallback_OnPetTitanChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.onPetTitanChangedCallbacks.append( callbackFunc )
}

void function ClientCodeCallback_OnPetTitanChanged( entity player )
{
	if ( !IsValid( player ) || player != GetLocalViewPlayer() )
		return

	if ( !IsMenuLevel() )
		thread PetTitanChanged( player )

	player.Signal( "PetTitanChanged" )

	// Added via AddCallback_OnPetTitanModeChanged
	foreach ( callbackFunc in clGlobal.onPetTitanChangedCallbacks )
	{
		callbackFunc( player )
	}
}

void function ClientCodeCallback_OnPetTitanModeChanged( entity player )
{
	if ( !IsValid( player ) || player != GetLocalViewPlayer() )
		return

	if ( !IsValid( player.GetPetTitan() ) ) // should be an assert...
		return

	player.Signal( "PetTitanModeChanged" )

	// Added via AddCallback_OnPetTitanModeChanged
	foreach ( callbackFunc in clGlobal.onPetTitanModeChangedCallbacks )
	{
		callbackFunc( player )
	}
}

void function AddCallback_OnPetTitanModeChanged( void functionref( entity ) callbackFunc )
{
	clGlobal.onPetTitanModeChangedCallbacks.append( callbackFunc )
}