untyped

globalize_all_functions

global struct ShopWeaponData
{
    int ammo,
    int maxAmmo,
    string className,
    array<string> mods
    array<string> allMods
}

struct CategoryData
{
    string displayName
    array<string> options
}

struct ModData
{
    string className
    int value
}
// AMMO
// flatline ( 140 ), mozam ( 32 )
// BUY UPGRADES
// flatline ( 1 ) mozam ( 0 )
// SELL UPGRADES
// flatline ( 1 ) mozam ( 0 ) (locked)
// REPLACE
// flatline | mozam

struct
{
    var menu
    table< int, array<var> > buttons
    array<var> headers = []
    array<string> items
    ComboStruct comboStruct
} file

global ShopWeaponData primary
global ShopWeaponData secondary

// GetWeaponInfoFileKeyField_WithMods_Global
void function ShopTest_Init()
{
    AddMenu( "ShopTest", $"resource/ui/menus/shop_test.menu", InitShopTestMenu, "Shop" )
    AddMenu( "ModSelect", $"resource/ui/menus/mod_select.menu", ModSelectMenuInit, "Mod Select" )
}

void function InitShopTestMenu()
{
    var menu = GetMenu("ShopTest")
    file.menu = menu

	ComboStruct comboStruct = ComboButtons_Create( file.menu )
    //file.comboStruct = comboStruct

    for (int i = 0; i < 5; i++) {
        int buttonIndex = 0
	    file.headers.append(AddComboButtonHeader( comboStruct, i, "ITEM " + i ))
        file.buttons[i] <- []
    	file.buttons[i].append(AddComboButton( comboStruct, i, buttonIndex++, "Buy" ))
        Hud_AddEventHandler( file.buttons[i][0], UIE_CLICK, BuyItemEventHandler(i) )
    	//Hud_AddEventHandler( primaryBuyButton, UIE_CLICK, OnResumeGame_Activate )
    	//file.buttons[i].append(AddComboButton( comboStruct, i, buttonIndex++, "Sell" ))

        /*switch (headers[i])
        {
            case "AMMO":
                Hud_AddEventHandler(file.buttons[i][0], UIE_CLICK, function ( var button ) : () {
                    ClientCommand("buyammo 0")
                    CloseActiveMenu()
                })
                Hud_AddEventHandler(file.buttons[i][1], UIE_CLICK, function ( var button ) : () {
                    ClientCommand("buyammo 1")
                    CloseActiveMenu()
                })
                break
            case "BUY UPGRADES":
            case "SELL UPGRADES":
                Hud_AddEventHandler(file.buttons[i][0], UIE_CLICK, PrimaryModMenuButton_OnClick )
                Hud_AddEventHandler(file.buttons[i][1], UIE_CLICK, SecondaryModMenuButton_OnClick )
                break
        }*/
    }
    ComboButtons_Finalize( comboStruct )
    //Hud_AddEventHandler(file.buttons[0][1], UIE_CLICK, PrimaryModMenuButton_OnClick )
    //Hud_AddEventHandler(file.buttons[1][1], UIE_CLICK, SecondaryModMenuButton_OnClick)

    AddMenuEventHandler( menu, eUIEvent.MENU_OPEN, OnShopTest_Open )
	AddMenuFooterOption( menu, BUTTON_B, "#B_BUTTON_BACK", "#BACK" )
}

void functionref( var ) function BuyItemEventHandler( int index )
{
    return void function( var button ) : (index){
        ClientCommand( "buyitem " + index )
        CloseActiveMenu()
    }
}

void function OnShopTest_Open()
{
	//Hud_AddEventHandler( lastCheckpointButton, UIE_CLICK, OnReloadCheckpoint_Activate )
    RunClientScript("GetClientWeapons_ShopTest")
}


void function SetClientWeapons_ShopTest()
{
    print("primary")

    array<ShopWeaponData> weapons = [primary, secondary]

    int buttonIndex = 0
    //var name = GetWeaponInfoFileKeyField_WithMods_Global( weapons[i].className, weapons[i].mods, "shortprintname")
    //expect string (name)
    //RuiSetString(Hud_GetRui(file.headers[i]), "titleText", expect string (name))
    //Hud_AddEventHandler( primaryBuyButton, UIE_CLICK, OnResumeGame_Activate )
    
    //ComboButton_SetText(file.buttons[i][buttonIndex++], "Replace" )
    //foreach(string mod in weapons[i].mods){
    //    print(mod)
    //}

    for (int j = 0; j < file.headers.len(); j++)
    {
        var buttons = file.buttons[j]

        var rui = Hud_GetRui( file.headers[j] )
        if (file.items[j] != "-")
        {
            RuiSetString( rui, "titleText", Roguelike_GetItemName(file.items[j]) )
            Hud_SetEnabled( file.buttons[j][0], true )
            Hud_SetLocked( file.buttons[j][0], false )
        }
        else
        {
            RuiSetString( rui, "titleText", "[Empty]" )
            Hud_SetEnabled( file.buttons[j][0], false )
            Hud_SetLocked( file.buttons[j][0], true )
        }

        //ComboButton_SetText(file.buttons[j][i], "Buy" )
        /*switch (headers[j])
        {
            case "AMMO":
                ComboButton_SetText(file.buttons[j][i], name + " ( "+ weapons[i].ammo.tostring() + " / "+ weapons[i].maxAmmo.tostring() + " )" )
                break
            case "BUY UPGRADES":
                ComboButton_SetText(file.buttons[j][i], name + " ( " + weapons[i].mods.len().tostring() + " / " + GetWeaponMods_Global( weapons[i].className ).len() + " )" )
                break
            case "SELL UPGRADES":
                Hud_SetLocked(file.buttons[j][i], weapons[i].mods.len() <= 0)
                ComboButton_SetText(file.buttons[j][i], name + " ( " + weapons[i].mods.len().tostring() + " / " + GetWeaponMods_Global( weapons[i].className ).len() + " )" )
                break
            case "REPLACE":
                ComboButton_SetText(file.buttons[j][i], name )
                break
        }*/
        
    }
}

void function Roguelike_SetShopItems(string items)
{
    array<string> items = split( items, " " )
    file.items = items

}
void function Roguelike_ItemBought( int index )
{
    if (index >= file.items.len())
        return
    file.items[index] = "-"
}

void function SetClientWeaponData(bool isSecondary, string name, int ammo, int maxAmmo)
{
    print("yay")
    if (isSecondary)
    {
        secondary.className = name
        secondary.ammo = ammo
        secondary.maxAmmo = maxAmmo
    }
    else
    {
        primary.className = name
        primary.ammo = ammo
        primary.maxAmmo = maxAmmo
    }
}

void function AddModsToWeapon_ShopTest(bool isSecondary, string mods)
{
    if (isSecondary) {
        secondary.mods = []
        if (mods != "") secondary.mods = split( mods, "\n")
    }
    else {
        primary.mods = [] 
        if (mods != "") primary.mods = split( mods, "\n")
    }
}

void function PrimaryModMenuButton_OnClick(var button)
{
    if (Hud_IsLocked(button))
        return
    SetIsSecondary_ModSelect(false)
    SetIsSelling_ModSelect(button == file.buttons[2][0])
    AdvanceMenu( GetMenu("ModSelect") )
}

void function SecondaryModMenuButton_OnClick(var button)
{
    if (Hud_IsLocked(button))
        return
    SetIsSecondary_ModSelect(true)
    SetIsSelling_ModSelect(button == file.buttons[2][1])
    AdvanceMenu( GetMenu("ModSelect") )
}

void function UpdateClientMenuOpenState()
{
	for ( ;; )
	{
		WaitSignal( uiGlobal.signalDummy, "ActiveMenuChanged" )

        int newState = 0
        if ( IsDialogOnlyActiveMenu() )
            newState = 2
        else if ( uiGlobal.activeMenu != null)
            newState = 1

        RunMenuClientFunction( "Roguelike_OnPaused", newState != 0 )
	}
}