untyped 
globalize_all_functions

struct 
{
    GridMenuData gridData
    var menu
    bool isSecondary = false
    bool isSelling = false
} file

void function ModSelectMenuInit()
{
    
    //print("fuck oh shit fuckfuckfuck")
    var menu = GetMenu( "ModSelect" )
	file.menu = menu
	file.gridData.rows = 8
	file.gridData.columns = 4
	file.gridData.paddingVert = 5
	file.gridData.paddingHorz = 5
	file.gridData.numElements = 32
    file.gridData.tileWidth = Grid_GetMaxWidthForSettings(file.menu, file.gridData)
    file.gridData.tileHeight = Grid_GetMaxHeightForSettings(file.menu, file.gridData)
	file.gridData.pageType = eGridPageType.HORIZONTAL

	//file.gridData.tileHeight = minint( Grid_GetMaxHeightForSettings( menu, file.gridData ), int( tileHeight ) + 80 )
	file.gridData.initCallback = OnModButtonReady
	file.gridData.buttonFadeCallback = Grid_FadeDefaultElementChildren
	//file.gridData.getFocusCallback = SPButton_GetFocus
	file.gridData.clickCallback = ModButton_Click

	AddMenuEventHandler( menu, eUIEvent.MENU_OPEN, OnOpenModSelectMenu )

	AddMenuFooterOption( menu, BUTTON_A, "#A_BUTTON_SELECT", "", null )
	AddMenuFooterOption( menu, BUTTON_B, "#B_BUTTON_BACK", "#BACK" )
}

void function ModButton_Click( var button, int elemNum )
{
    ShopWeaponData weapon = file.isSecondary ? secondary : primary
    int index = Grid_GetElemNumForButton(button)
    printt("Mod Selected:", GetWeaponMods_Global( weapon.className )[index])
}

void function OnOpenModSelectMenu()
{
    ShopWeaponData weapon = file.isSecondary ? secondary : primary
	file.gridData.numElements = GetWeaponMods_Global( weapon.className ).len() - weapon.mods.len()
    if (file.isSelling) file.gridData.numElements = weapon.mods.len()
    GridMenuInit( file.menu, file.gridData )
}

string function GetModFromElemNum( ShopWeaponData weapon, int elemNum )
{
    array<string> allMods = GetWeaponMods_Global( weapon.className )
    int modsPassed = 0
    for (int i = 0; i < allMods.len(); i++)
    {
        if (modsPassed == elemNum && ShouldShowMod(weapon, allMods[i])) 
            return allMods[i]
        if (ShouldShowMod(weapon, allMods[i]))
            modsPassed++
    }
    unreachable
}

bool function ShouldShowMod(ShopWeaponData weapon, string mod)
{
    return file.isSelling == weapon.mods.contains(mod)
}

bool function OnModButtonReady(var button, int elemNum)
{
    ShopWeaponData weapon = file.isSecondary ? secondary : primary
    array<string> allMods = GetWeaponMods_Global( weapon.className )
    
    Hud_SetText(button, GetModFromElemNum( weapon, elemNum ))

    return true
}

void function SetIsSecondary_ModSelect(bool isSecondary)
{
    file.isSecondary = isSecondary
}

void function SetIsSelling_ModSelect(bool isSelling)
{
    file.isSelling = isSelling
}